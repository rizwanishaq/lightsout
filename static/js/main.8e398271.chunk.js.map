{"version":3,"sources":["components/Cell.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","isLit","flipCellsAroundMe","className","onClick","e","Board","nrows","ncols","chanceLightStartsOn","flipCellsAround","coord","board","state","split","map","Number","y","x","flipCell","hasWon","every","row","cell","setState","useState","push","Math","random","createBoard","tblBoard","key","makeTable","App","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAceA,MAXf,YAA6C,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,kBACrB,OACE,wBACEC,UAAW,QAAUF,EAAQ,YAAc,IAC3CG,QAAS,SAAAC,GACPH,QCqFOI,MAzFf,YAAsE,IAAD,IAApDC,aAAoD,MAA5C,EAA4C,MAAzCC,aAAyC,MAAjC,EAAiC,MAA9BC,2BAA8B,MAAR,IAAQ,EAgB7DC,EAAkB,SAAAC,GACtB,IAAIC,EAAQC,EAAMD,MADa,EAElBD,EAAMG,MAAM,KAAKC,IAAIC,QAFH,mBAE1BC,EAF0B,KAEvBC,EAFuB,KAI/B,SAASC,EAASF,EAAGC,GAGfA,GAAK,GAAKA,EAAIV,GAASS,GAAK,GAAKA,EAAIV,IACvCK,EAAMK,GAAGC,IAAMN,EAAMK,GAAGC,IAI5BC,EAASF,EAAGC,GACZC,EAASF,EAAGC,EAAI,GAChBC,EAASF,EAAGC,EAAI,GAChBC,EAASF,EAAI,EAAGC,GAChBC,EAASF,EAAI,EAAGC,GAIhB,IAAIE,EAASR,EAAMS,OAAM,SAAAC,GAAG,OAAIA,EAAID,OAAM,SAAAE,GAAI,OAAKA,QAEnDC,EAAS,CAAEZ,MAAOA,EAAOQ,OAAQA,KAtCgC,EAiEzCK,mBAAS,CAAEL,QAAQ,EAAOR,MAhEhC,WAGlB,IAFA,IAAIA,EAAQ,GAEHK,EAAI,EAAGA,EAAIV,EAAOU,IAAK,CAE9B,IADA,IAAIK,EAAM,GACDJ,EAAI,EAAGA,EAAIV,EAAOU,IACzBI,EAAII,KAAKC,KAAKC,SAAWnB,GAE3BG,EAAMc,KAAKJ,GAEb,OAAOV,EAsDkDiB,KAjEQ,mBAiE5DhB,EAjE4D,KAiErDW,EAjEqD,KAmEnE,OACE,6BACE,6BACGX,EAAMO,OACL,yBAAKjB,UAAU,UACb,0BAAMA,UAAU,eAAhB,OACA,0BAAMA,UAAU,aAAhB,SAGF,6BACE,yBAAKA,UAAU,eACb,yBAAKA,UAAU,eAAf,UACA,yBAAKA,UAAU,aAAf,QArCM,WAEhB,IADA,IAAI2B,EAAW,GACNb,EAAI,EAAGA,EAAIV,EAAOU,IAAK,CAE9B,IADA,IAAIK,EAAM,GADoB,WAErBJ,GACP,IAAIP,EAAK,UAAMM,EAAN,YAAWC,GACpBI,EAAII,KACF,kBAAC,EAAD,CACEK,IAAKpB,EACLV,MAAOY,EAAMD,MAAMK,GAAGC,GACtBhB,kBAAmB,kBAAMQ,EAAgBC,QANtCO,EAAI,EAAGA,EAAIV,EAAOU,IAAM,EAAxBA,GAUTY,EAASJ,KAAK,wBAAIK,IAAKd,GAAIK,IAE7B,OACE,2BAAOnB,UAAU,SACf,+BAAQ2B,IAqBHE,OC3DEC,MAtBf,WACE,OACE,6BACE,qDAEE,uBAAGC,KAAK,sDAAR,sDAFF,IAME,6BACA,iGAKF,yBAAK/B,UAAU,OACb,kBAAC,EAAD,SCRYgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8e398271.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Cell.css\";\n\nfunction Cell({ isLit, flipCellsAroundMe }) {\n  return (\n    <td\n      className={\"Cell\" + (isLit ? \" Cell-lit\" : \"\")}\n      onClick={e => {\n        flipCellsAroundMe();\n      }}\n    />\n  );\n}\n\nexport default Cell;\n","import React, { useState } from \"react\";\nimport \"./Board.css\";\nimport Cell from \"./Cell\";\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.25 }) {\n  const createBoard = () => {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  };\n\n  /** handle changing a cell: update board & determine if winner */\n\n  const flipCellsAround = coord => {\n    let board = state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x); //Flip initial cell\n    flipCell(y, x - 1); //flip left\n    flipCell(y, x + 1); //flip right\n    flipCell(y - 1, x); //flip below\n    flipCell(y + 1, x); //flip above\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    setState({ board: board, hasWon: hasWon });\n  };\n\n  /** Render game board or winning message. */\n  const makeTable = () => {\n    let tblBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={state.board[y][x]}\n            flipCellsAroundMe={() => flipCellsAround(coord)}\n          />\n        );\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n    return (\n      <table className=\"Board\">\n        <tbody>{tblBoard}</tbody>\n      </table>\n    );\n  };\n\n  const [state, setState] = useState({ hasWon: false, board: createBoard() });\n\n  return (\n    <div>\n      <div>\n        {state.hasWon ? (\n          <div className=\"winner\">\n            <span className=\"neon-orange\">YOU</span>\n            <span className=\"neon-blue\">WIN!</span>\n          </div>\n        ) : (\n          <div>\n            <div className=\"Board-title\">\n              <div className=\"neon-orange\">Lights</div>\n              <div className=\"neon-blue\">Out</div>\n            </div>\n            {makeTable()}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n","import React from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/Board\";\n\nfunction App() {\n  return (\n    <div>\n      <h3>\n        Source: Udemy course (\n        <a href=\"https://www.udemy.com/course/modern-react-bootcamp\">\n          https://www.udemy.com/course/modern-react-bootcamp\n        </a>\n        )\n        <hr />\n        <h4>\n          Changed everything from class component to functional components\n        </h4>\n      </h3>\n\n      <div className=\"App\">\n        <Board />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}